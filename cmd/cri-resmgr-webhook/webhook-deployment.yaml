apiVersion: v1
kind: Namespace
metadata:
  name: cri-resmgr
  labels:
    name: cri-resmgr
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cri-resmgr-webhook
  namespace: cri-resmgr
  labels:
    app: cri-resmgr-webhook
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cri-resmgr-webhook
  template:
    metadata:
      labels:
        app: cri-resmgr-webhook
    spec:
      containers:
      - name: cri-resmgr-webhook
        image: IMAGE_PLACEHOLDER
        # Convenience pull policy for development
        imagePullPolicy: Always
        ports:
        - containerPort: 443
        # Mount the tls cert/key in the default location
        volumeMounts:
        - name: certs
          mountPath: /etc/cri-resmgr-webhook/certs.d/
          readOnly: true
        args:
         - "-cert-file=/etc/cri-resmgr-webhook/certs.d/svc.crt"
         - "-key-file=/etc/cri-resmgr-webhook/certs.d/svc.key"
         - "-port=8443"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
        resources:
          limits:
            cpu: 1
            memory: 256Mi

      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: "Equal"
          value: ""
          effect: "NoSchedule"
      volumes:
      # This example deployment uses k8s secrests to store TLS secrets
      # You need to manually generate the cert/key pair, and, the accompanying secret
      # Expected filenames are "svc.crt" and "svc.key"
      - name: certs
        secret:
          secretName: cri-resmgr-webhook-secret
---
apiVersion: v1
kind: Service
metadata:
  name: cri-resmgr-webhook
  namespace: cri-resmgr
spec:
  selector:
    app: cri-resmgr-webhook
  ports:
  - port: 443
    targetPort: 8443
    protocol: TCP

